react初始化阶段需要调用5个函数
第一个函数 getDefaultProps,这个函数有两个要点
第一点就是这个方法只会调用一次,只有组件的第一个实例在初始化的时候才会调用getDefaultProps,然后react会把这个函数的返回结果保存起来,从第二个是实例开始他们的默认属性都是同一个结果
另一个要点就是实例之间共享引用,在原生js中传值的方式主要有两种,一种数值类型的数据传递的是值(数字,布尔,字符串),另外一种类型的数据是引用类型的数据传递的是地址
对象数组函数,函数返回的是引用类型的数据,react会把函数返回的地址保存起来,在,创建不同的实例时候,会使用同一个引用,我们知道引用其实操作的是同一个地址

第二个函数是getInitialState  这个函数的要点就是初始化每个实例特有的状态,每个实例初始化的时候都会调用这个函数  getDefaultProps处理是属性,getInitialState处理的是状态,因为状态是每个实例内部的信息,每个实例要自己维护自己的状态,所以说不同的的实例可能会有不同的状态

第三个是ComponentWillMount,他是render之前最后一次修改状态的机会,这里需要强调的是这个时候你还是可以修改状态的,但是在render的时候就不能修改状态了,

render  只能访问this.props和this.state这个个是他特有的数据源,除此之外,你不能回去这个组件的其他信息
,第二个要点就是只有一个顶层组件,在代码中很好理解就是render的返回值只能是一个组件,当然这个组件里还可以有很多的字组件
第三个要点就是不允许修改状态和DOM输出,但是如果你非要这样做的话也是可以实现的,但是react非常非常不推崇这样做,只所以不推崇这样做就是如果你修改状态和DOM输出的话react就不能再服务端使用,但是一般的情况下render是在可以端进行渲染,但是如果你想提高网站的性能,就可以把render函数,放在服务器端进行渲染,第二个原因就是如果你在render修改状态和DOM输出的话就会让逻辑变得很复杂,react的设计目的就是让逻辑变得清晰简单,违背了设计目的


最后一个函数是componentDidMount:
这个函数会在成功的render并渲染真实的DOM之后出发,这个函数促发的时候组件已经显示在了页面上,这个阶段的时候我们要修改DOM进行一些操作,操作DOM就要必须在这个函数里完成,实际上你想在其他的阶段操作DOM也是不可能的,只有DOM被渲染到了页面上了以后,我们才能操作他



组件本质上就是一个状态机,输入确定,输出一定确定
react的两个特点:去除所有的手动DOM操作,也就是使用jsx的语法
 组件把状态和结果一一对应起来从而能直观的理解程序在不同的状态时会产生什么样的输出

 当状态发生转化的时候会触发不同的的钩子函数,从而让开发者做出反应

可以用事件的思想来理解状态,开发这不知道什么时候触发事件,但是开发者能决定触发事件是做出的反应,
状态和事件有些类似,但是事件之间是没有直接的联系的每个事件都是独立发生的,但是状态和状态之间是有关系的 ,组件可以处于不同的状态中,组件所有的状态组合起来就组成组件的生命周期



组件的生命周期?

首先就是初始化阶段
组件的代码生成组件的实例
初始化阶段组件会进行一些初始化的状态设置以及渲染也就是render
在初始化结束之后组件就会被渲染到页面上,可以被用户使用

初始化完成之后就是  updata
对于实例来说,绝大多部分的时间都处在运行中的阶段,运行中实例的状态可能会发生改变,从而触发一系列的钩子函数,最终这些改变可能会导致组件重新渲染

最后一个阶段就是unMount阶段  就是销毁阶段




初始化阶段可以使用5个钩子函数
就是5个状态函数

运行中阶段

第一个钩子函数,是组件在将要接受属性的时候的调用
当组件的属性发生变化的时候,比如父组件组件改变了组件的属性,那么组件可能就需要更新
那么组件就是在接受属性之前触发的函数,属性在传给组件之前开发者有机会去处理这样的属性,比如修改属性或者是改变属性的一些状态

第二个钩子函数是shouldComponentUpdate,当组件接受到新的属性或者是新的状态的时候,组件是否要更新,这个函数传递的一个值是一个blean值,是true的才会执行下面的函数


接下来进行的钩子函数是componentWillUpdate,在render之前触发函数

接下来是render函数










销毁阶段
销毁阶段阶段调用的钩子函数是componentWillUnmount,这个函数会在销魂操作真正进行之前操作,给开发者最后的机会来进行一些清理操作
